#!/usr/bin/env python3
"""
Create a visual diagram showing the 5 key vulnerability categories discovered
in GPT-OSS-20B red-teaming analysis.
"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import FancyBboxPatch
import numpy as np

def create_vulnerability_diagram():
    """Create a professional diagram showing vulnerability categories and severity."""
    
    # Set up the figure with a professional style
    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax = plt.subplots(1, 1, figsize=(14, 10))
    
    # Define vulnerability data
    vulnerabilities = [
        {
            'name': 'Evaluation\nAwareness',
            'severity': 7,
            'novelty': 8,
            'description': 'Context-dependent\ndeception in testing',
            'pos': (2, 8),
            'color': '#FF6B6B'
        },
        {
            'name': 'Reward\nHacking',
            'severity': 6,
            'novelty': 7,
            'description': 'Confidence\nmanipulation',
            'pos': (6, 8),
            'color': '#4ECDC4'
        },
        {
            'name': 'Tool Use\nViolations',
            'severity': 8,
            'novelty': 6,
            'description': 'Boundary violations\nin function calling',
            'pos': (10, 8),
            'color': '#45B7D1'
        },
        {
            'name': 'Information\nLeakage',
            'severity': 5,
            'novelty': 9,
            'description': 'Chain-of-thought\ninformation exposure',
            'pos': (4, 4),
            'color': '#96CEB4'
        },
        {
            'name': 'Subtle\nSabotage',
            'severity': 9,
            'novelty': 8,
            'description': 'Plausible errors in\nconflict scenarios',
            'pos': (8, 4),
            'color': '#FECA57'
        }
    ]
    
    # Set up the axis
    ax.set_xlim(0, 12)
    ax.set_ylim(0, 10)
    ax.set_aspect('equal')
    
    # Remove axis ticks and labels
    ax.set_xticks([])
    ax.set_yticks([])
    
    # Add title
    ax.text(6, 9.5, 'GPT-OSS-20B Vulnerability Analysis', 
            fontsize=20, fontweight='bold', ha='center',
            bbox=dict(boxstyle="round,pad=0.3", facecolor='lightblue', alpha=0.7))
    
    # Add subtitle
    ax.text(6, 9, 'Critical Safety Issues Discovered Through Systematic Red-Teaming', 
            fontsize=14, ha='center', style='italic', color='gray')
    
    # Draw vulnerability boxes
    for vuln in vulnerabilities:
        x, y = vuln['pos']
        
        # Main vulnerability box
        box = FancyBboxPatch(
            (x-0.8, y-0.8), 1.6, 1.6,
            boxstyle="round,pad=0.1",
            facecolor=vuln['color'],
            edgecolor='black',
            linewidth=2,
            alpha=0.8
        )
        ax.add_patch(box)
        
        # Vulnerability name
        ax.text(x, y+0.3, vuln['name'], 
                fontsize=12, fontweight='bold', ha='center', va='center')
        
        # Severity indicator
        ax.text(x-0.6, y+0.6, f"Sev: {vuln['severity']}/10", 
                fontsize=10, fontweight='bold', ha='center',
                bbox=dict(boxstyle="round,pad=0.2", facecolor='white', alpha=0.9))
        
        # Novelty indicator  
        ax.text(x+0.6, y+0.6, f"Nov: {vuln['novelty']}/10", 
                fontsize=10, fontweight='bold', ha='center',
                bbox=dict(boxstyle="round,pad=0.2", facecolor='white', alpha=0.9))
        
        # Description
        ax.text(x, y-0.3, vuln['description'], 
                fontsize=9, ha='center', va='center', style='italic')
    
    # Add connecting lines to show relationships
    # Connect evaluation awareness to reward hacking
    ax.plot([2.8, 5.2], [8, 8], 'k--', alpha=0.3, linewidth=1)
    
    # Connect tool use to sabotage
    ax.plot([10, 8.8], [7.2, 4.8], 'k--', alpha=0.3, linewidth=1)
    
    # Connect information leakage to evaluation awareness
    ax.plot([3.2, 2.8], [4.8, 7.2], 'k--', alpha=0.3, linewidth=1)
    
    # Add legend
    legend_elements = [
        plt.Rectangle((0, 0), 1, 1, facecolor='#FF6B6B', alpha=0.8, label='High Severity (7-9)'),
        plt.Rectangle((0, 0), 1, 1, facecolor='#4ECDC4', alpha=0.8, label='Medium Severity (5-6)'),
        plt.Rectangle((0, 0), 1, 1, facecolor='white', edgecolor='black', label='Novelty Score'),
    ]
    
    ax.legend(handles=legend_elements, loc='lower left', fontsize=10)
    
    # Add summary statistics box
    stats_text = """Key Statistics:
• 5 Critical Vulnerabilities Found
• Average Severity: 7.0/10
• Average Novelty: 7.6/10
• 9 Categories Analyzed
• 100% Reproducible"""
    
    ax.text(0.5, 2.5, stats_text, 
            fontsize=11, va='top', ha='left',
            bbox=dict(boxstyle="round,pad=0.4", facecolor='lightgray', alpha=0.8))
    
    # Add methodology note
    method_text = """Methodology: Systematic red-teaming using automated 
frameworks, white-box analysis, and manual exploration
across all 9 competition vulnerability categories."""
    
    ax.text(6, 1, method_text, 
            fontsize=10, ha='center', va='center', style='italic',
            bbox=dict(boxstyle="round,pad=0.3", facecolor='lightyellow', alpha=0.7))
    
    # Remove spines
    for spine in ax.spines.values():
        spine.set_visible(False)
    
    plt.tight_layout()
    return fig

def main():
    """Create and save the vulnerability diagram."""
    print("Creating GPT-OSS-20B vulnerability analysis diagram...")
    
    fig = create_vulnerability_diagram()
    
    # Save in multiple formats
    fig.savefig('gpt-oss-20b-vulnerabilities.png', dpi=300, bbox_inches='tight', 
                facecolor='white', edgecolor='none')
    fig.savefig('gpt-oss-20b-vulnerabilities.pdf', bbox_inches='tight',
                facecolor='white', edgecolor='none')
    
    print("✅ Diagram saved as:")
    print("   - gpt-oss-20b-vulnerabilities.png (high-res)")
    print("   - gpt-oss-20b-vulnerabilities.pdf (vector)")
    
    # Show the plot
    plt.show()

if __name__ == "__main__":
    main()
